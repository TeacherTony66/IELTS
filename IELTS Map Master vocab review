<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map Master: IELTS Language Challenge</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
            color: #334155; /* Slate-700 for text */
        }
        .game-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
            background-color: #ffffff;
            border-radius: 16px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
            border: none;
        }
        .btn-primary {
            background-color: #3b82f6; /* Blue-500 */
            color: white;
        }
        .btn-primary:hover {
            background-color: #2563eb; /* Blue-600 */
        }
        .btn-secondary {
            background-color: #64748b; /* Slate-500 */
            color: white;
        }
        .btn-secondary:hover {
            background-color: #475569; /* Slate-600 */
        }
        .btn-answer {
            background-color: #e2e8f0; /* Slate-200 */
            color: #334155; /* Slate-700 */
            border: 1px solid #cbd5e1; /* Slate-300 */
            width: 100%;
            text-align: left;
        }
        .btn-answer:hover {
            background-color: #cbd5e1; /* Slate-300 */
        }
        .btn-answer.correct {
            background-color: #22c55e; /* Green-500 */
            color: white;
            border-color: #16a34a; /* Green-600 */
        }
        .btn-answer.incorrect {
            background-color: #ef4444; /* Red-500 */
            color: white;
            border-color: #dc2626; /* Red-600 */
        }
        .feedback-message {
            padding: 1rem;
            border-radius: 8px;
            margin-top: 1rem;
            font-weight: 500;
        }
        .feedback-correct {
            background-color: #dcfce7; /* Green-100 */
            color: #166534; /* Green-800 */
            border: 1px solid #86efac; /* Green-300 */
        }
        .feedback-incorrect {
            background-color: #fee2e2; /* Red-100 */
            color: #991b1b; /* Red-800 */
            border: 1px solid #fca5a5; /* Red-300 */
        }
        .progress-bar-container {
            width: 100%;
            background-color: #e5e7eb; /* Gray-200 */
            border-radius: 9999px;
            height: 10px;
            margin-bottom: 1.5rem;
        }
        .progress-bar {
            background-color: #3b82f6; /* Blue-500 */
            height: 100%;
            border-radius: 9999px;
            transition: width 0.3s ease-in-out;
        }
        .map-area {
            border: 2px dashed #94a3b8; /* Slate-400 */
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            background-color: #f8fafc; /* Slate-50 */
        }
        .map-feature {
            background-color: #bfdbfe; /* Blue-200 */
            color: #1e3a8a; /* Blue-800 */
            padding: 0.5rem;
            margin: 0.25rem;
            border-radius: 4px;
            font-size: 0.9rem;
            text-align: center;
        }
        #draggable-container .draggable {
            cursor: grab;
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            background-color: #93c5fd; /* Blue-300 */
            border: 1px solid #60a5fa; /* Blue-400 */
            border-radius: 6px;
        }
        #droppable-container .droppable {
            padding: 1rem;
            margin: 0.25rem;
            background-color: #e0f2fe; /* Sky-100 */
            border: 2px dashed #7dd3fc; /* Sky-300 */
            border-radius: 6px;
            min-height: 50px;
        }
        .score-badge {
            background-color: #f59e0b; /* Amber-500 */
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.9rem;
            font-weight: bold;
        }
        /* Modal styles */
        .modal {
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #fff;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            max-width: 90%;
            width: 400px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-blue-600">üó∫Ô∏è Map Master</h1>
            <p class="text-lg text-slate-600">IELTS Language Challenge</p>
        </header>

        <div id="start-screen" class="text-center">
            <h2 class="text-2xl font-semibold mb-4">Welcome, Language Explorer!</h2>
            <p class="mb-6 text-slate-700">Test your knowledge of language used to describe maps in IELTS Writing Task 1. Are you ready to become a Map Master?</p>
            <button id="start-game-btn" class="btn btn-primary text-lg">Start Game</button>
        </div>

        <div id="game-screen" class="hidden">
            <div class="flex justify-between items-center mb-4">
                <p class="text-sm text-slate-500">Question <span id="current-question-number"></span> of <span id="total-questions"></span></p>
                <p class="text-lg font-semibold">Score: <span id="score" class="score-badge">0</span></p>
            </div>
            
            <div class="progress-bar-container">
                <div id="progress-bar" class="progress-bar" style="width: 0%;"></div>
            </div>

            <div id="question-area" class="mb-6">
                <h3 id="question-text" class="text-xl font-semibold mb-4"></h3>
                <div id="map-display-area" class="map-area hidden">
                    </div>
                <div id="options-area" class="space-y-3">
                    </div>
                <div id="draggable-container" class="flex flex-wrap justify-center my-4"></div>
                <div id="droppable-container" class="space-y-2 my-4"></div>
                <input type="text" id="text-input-area" class="hidden w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Type your answer here...">
            </div>

            <div id="feedback-area" class="mb-6">
                </div>

            <div class="text-center">
                <button id="next-question-btn" class="btn btn-secondary hidden">Next Question</button>
            </div>
        </div>

        <div id="end-screen" class="hidden text-center">
            <h2 class="text-3xl font-bold mb-4 text-blue-600">Challenge Complete!</h2>
            <p class="text-xl mb-2">Your Final Score: <span id="final-score" class="font-bold text-amber-500 text-2xl"></span></p>
            <p id="final-message" class="text-slate-700 mb-6"></p>
            <button id="play-again-btn" class="btn btn-primary text-lg">Play Again</button>
        </div>
    </div>

    <div id="custom-modal" class="modal hidden">
        <div class="modal-content">
            <h3 id="modal-title" class="text-xl font-semibold mb-3"></h3>
            <p id="modal-message" class="text-slate-700 mb-5"></p>
            <button id="modal-ok-btn" class="btn btn-primary">OK</button>
        </div>
    </div>

    <script>
        // DOM Elements
        const startScreen = document.getElementById('start-screen');
        const gameScreen = document.getElementById('game-screen');
        const endScreen = document.getElementById('end-screen');
        const startGameBtn = document.getElementById('start-game-btn');
        const nextQuestionBtn = document.getElementById('next-question-btn');
        const playAgainBtn = document.getElementById('play-again-btn');

        const questionTextEl = document.getElementById('question-text');
        const optionsArea = document.getElementById('options-area');
        const draggableContainer = document.getElementById('draggable-container');
        const droppableContainer = document.getElementById('droppable-container');
        const textInputArea = document.getElementById('text-input-area');
        const mapDisplayArea = document.getElementById('map-display-area');
        
        const feedbackArea = document.getElementById('feedback-area');
        const scoreEl = document.getElementById('score');
        const finalScoreEl = document.getElementById('final-score');
        const finalMessageEl = document.getElementById('final-message');
        const currentQuestionNumberEl = document.getElementById('current-question-number');
        const totalQuestionsEl = document.getElementById('total-questions');
        const progressBar = document.getElementById('progress-bar');

        // Modal elements
        const customModal = document.getElementById('custom-modal');
        const modalTitleEl = document.getElementById('modal-title');
        const modalMessageEl = document.getElementById('modal-message');
        const modalOkBtn = document.getElementById('modal-ok-btn');

        // Sound effects synth
        let correctSound, incorrectSound;

        // Game State
        let score = 0;
        let currentQuestionIndex = 0;
        let questions = [];
        let selectedDraggable = null;

        const gameQuestions = [
            // Type 1: Vocabulary of Change - Verbs (Matching)
            {
                type: 'verb-match',
                questionText: 'Match the verb "Demolish" to its meaning:',
                verb: 'Demolish',
                options: ['Build something new', 'Make bigger', 'Knock down, remove a building', 'Change something into something else'],
                correctAnswer: 'Knock down, remove a building'
            },
            {
                type: 'verb-match',
                questionText: 'Match the verb "Expand" to its meaning:',
                verb: 'Expand',
                options: ['Move something to a new place', 'Make bigger', 'Repair and improve an old building', 'Add something new that wasn\'t there before'],
                correctAnswer: 'Make bigger'
            },
            {
                type: 'verb-fill',
                questionText: 'The old warehouses near the river were ________ to make way for new apartments.',
                options: ['constructed', 'demolished', 'expanded', 'relocated'],
                correctAnswer: 'demolished'
            },
            {
                type: 'verb-fill',
                questionText: 'A new sports center was ________ next to the school in 2010.',
                options: ['converted', 'renovated', 'constructed', 'pedestrianized'],
                correctAnswer: 'constructed'
            },
            // Type 2: Vocabulary of Change - Nouns (Fill in the blank)
            {
                type: 'noun-fill',
                questionText: 'The most noticeable change was the ________ (develop) of a new housing estate in the north.',
                correctAnswer: 'development' // Student types this
            },
            {
                type: 'noun-fill',
                questionText: 'The ________ (construct) of a new bridge significantly improved access to the island.',
                correctAnswer: 'construction'
            },
            // Type 3: Prepositions of Location (Multiple Choice with simple map description)
            {
                type: 'preposition-choice',
                mapDescription: {
                    center: 'School',
                    north: 'Park',
                    south: 'River'
                },
                questionText: 'Based on the map, the park is located ________ the school.',
                options: ['south of', 'next to', 'north of', 'between'],
                correctAnswer: 'north of'
            },
            {
                type: 'preposition-choice',
                mapDescription: {
                    center: 'Library',
                    west: 'Cafe',
                    east: 'Bookshop'
                },
                questionText: 'The library is ________ the cafe and the bookshop.',
                options: ['on the corner of', 'between', 'opposite', 'far from'],
                correctAnswer: 'between'
            },
             // Type 4: Tense Usage - Passive Voice (Sentence Transformation - Multiple Choice)
            {
                type: 'passive-choice',
                activeSentence: 'The council removed the old trees.',
                questionText: 'Choose the correct passive form:',
                options: [
                    'The old trees removed by the council.',
                    'The old trees were removed by the council.',
                    'The old trees was removed by the council.',
                    'The council was removed by the old trees.'
                ],
                correctAnswer: 'The old trees were removed by the council.'
            },
            {
                type: 'passive-choice',
                activeSentence: 'They constructed a new shopping center.',
                questionText: 'Choose the correct passive form:',
                options: [
                    'A new shopping center is constructed.',
                    'A new shopping center was constructed by them.',
                    'A new shopping center were constructed.',
                    'They were constructed by a new shopping center.'
                ],
                correctAnswer: 'A new shopping center was constructed by them.'
            },
            // Type 5: Linking Words (Multiple Choice)
            {
                type: 'linking-word',
                sentencePair: ['The residential area was expanded.', 'The industrial zone remained the same size.'],
                questionText: 'Combine the sentences with the best linking word:',
                options: ['Therefore', 'While', 'Because', 'Additionally'],
                correctAnswer: 'While'
            },
            {
                type: 'linking-word',
                sentencePair: ['In 2000, the area was largely rural.', 'By 2020, it had become highly urbanized.'],
                questionText: 'Choose the best linking word to show contrast:',
                options: ['Similarly', 'For example', 'However', 'Consequently'],
                correctAnswer: 'However' // Or In contrast, but 'However' is an option
            },
            // Type 6: Drag and Drop Vocabulary Match (Verb to Meaning)
            {
                type: 'drag-drop-verb',
                questionText: 'Drag the verb to its correct meaning.',
                verb: 'Convert',
                meaning: 'Change something into something else',
                otherMeanings: ['Build something new', 'Make bigger', 'Repair an old building']
            },
            {
                type: 'drag-drop-verb',
                questionText: 'Drag the verb to its correct meaning.',
                verb: 'Renovate',
                meaning: 'Repair and improve an old building',
                otherMeanings: ['Move to a new place', 'Make an area for foot traffic only', 'Knock down a building']
            }
        ];

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        
        function initSounds() {
            // Initialize synths for sound effects
            // Ensure Tone.js is loaded and user has interacted with the page for audio context
            if (typeof Tone !== 'undefined' && Tone.context.state !== 'running') {
                Tone.start(); // Attempt to start audio context if not running
            }

            correctSound = new Tone.Synth({
                oscillator: { type: "sine" },
                envelope: { attack: 0.01, decay: 0.1, sustain: 0.05, release: 0.2 }
            }).toDestination();

            incorrectSound = new Tone.Synth({
                oscillator: { type: "square" },
                envelope: { attack: 0.01, decay: 0.2, sustain: 0.01, release: 0.2 }
            }).toDestination();
        }

        function playCorrectSound() {
            if (correctSound && Tone.context.state === 'running') {
                correctSound.triggerAttackRelease("C5", "8n", Tone.now());
            }
        }

        function playIncorrectSound() {
             if (incorrectSound && Tone.context.state === 'running') {
                incorrectSound.triggerAttackRelease("C3", "8n", Tone.now());
            }
        }
        
        function showCustomModal(title, message) {
            modalTitleEl.textContent = title;
            modalMessageEl.textContent = message;
            customModal.classList.remove('hidden');
        }

        modalOkBtn.addEventListener('click', () => {
            customModal.classList.add('hidden');
        });

        function startGame() {
            score = 0;
            currentQuestionIndex = 0;
            questions = [...gameQuestions]; // Use a copy
            shuffleArray(questions); // Randomize question order
            
            totalQuestionsEl.textContent = questions.length;
            scoreEl.textContent = score;

            startScreen.classList.add('hidden');
            endScreen.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            nextQuestionBtn.classList.add('hidden');
            
            initSounds(); // Initialize sounds after user interaction (start game)
            displayQuestion();
        }

        function displayQuestion() {
            feedbackArea.innerHTML = '';
            optionsArea.innerHTML = '';
            draggableContainer.innerHTML = '';
            droppableContainer.innerHTML = '';
            textInputArea.classList.add('hidden');
            textInputArea.value = '';
            mapDisplayArea.classList.add('hidden');
            mapDisplayArea.innerHTML = '';
            
            if (currentQuestionIndex >= questions.length) {
                endGame();
                return;
            }

            const question = questions[currentQuestionIndex];
            questionTextEl.textContent = question.questionText;
            currentQuestionNumberEl.textContent = currentQuestionIndex + 1;
            progressBar.style.width = `${((currentQuestionIndex + 1) / questions.length) * 100}%`;

            switch (question.type) {
                case 'verb-match':
                case 'verb-fill':
                case 'passive-choice':
                case 'linking-word':
                    question.options.forEach(option => {
                        const button = document.createElement('button');
                        button.textContent = option;
                        button.classList.add('btn', 'btn-answer');
                        button.addEventListener('click', () => checkAnswer(option, button));
                        optionsArea.appendChild(button);
                    });
                    if (question.activeSentence) { // For passive-choice
                        const activeSentenceDisplay = document.createElement('p');
                        activeSentenceDisplay.classList.add('italic', 'text-slate-600', 'mb-2', 'p-2', 'bg-slate-100', 'rounded-md');
                        activeSentenceDisplay.textContent = `Original: "${question.activeSentence}"`;
                        questionTextEl.insertAdjacentElement('afterend', activeSentenceDisplay);
                    }
                     if (question.sentencePair) { // For linking-word
                        const sentencePairDisplay = document.createElement('div');
                        sentencePairDisplay.classList.add('italic', 'text-slate-600', 'mb-2', 'p-2', 'bg-slate-100', 'rounded-md');
                        sentencePairDisplay.innerHTML = `<p>"${question.sentencePair[0]}"</p><p>"${question.sentencePair[1]}"</p>`;
                        questionTextEl.insertAdjacentElement('afterend', sentencePairDisplay);
                    }
                    break;
                case 'noun-fill':
                    textInputArea.classList.remove('hidden');
                    textInputArea.onkeyup = (event) => {
                        if (event.key === 'Enter') {
                             checkAnswer(textInputArea.value.trim().toLowerCase());
                        }
                    };
                    // Add a submit button for text input
                    const submitBtn = document.createElement('button');
                    submitBtn.textContent = 'Submit Answer';
                    submitBtn.classList.add('btn', 'btn-primary', 'mt-2');
                    submitBtn.onclick = () => checkAnswer(textInputArea.value.trim().toLowerCase());
                    optionsArea.appendChild(submitBtn);
                    break;
                case 'preposition-choice':
                    mapDisplayArea.classList.remove('hidden');
                    const mapDesc = question.mapDescription;
                    let mapHTML = '<p class="text-sm text-center font-semibold mb-2">Simplified Map:</p><div class="grid grid-cols-3 gap-2 text-center">';
                    // Basic representation, can be improved with more visual elements
                    if (mapDesc.north) mapHTML += `<div class="col-start-2 map-feature">${mapDesc.north} (North)</div>`;
                    if (mapDesc.west) mapHTML += `<div class="map-feature">${mapDesc.west} (West)</div>`;
                    else mapHTML += `<div></div>`; 
                    if (mapDesc.center) mapHTML += `<div class="map-feature font-bold">${mapDesc.center} (Center)</div>`;
                    else mapHTML += `<div></div>`;
                    if (mapDesc.east) mapHTML += `<div class="map-feature">${mapDesc.east} (East)</div>`;
                    else mapHTML += `<div></div>`;
                    if (mapDesc.south) mapHTML += `<div class="col-start-2 map-feature">${mapDesc.south} (South)</div>`;
                    mapHTML += '</div>';
                    mapDisplayArea.innerHTML = mapHTML;

                    question.options.forEach(option => {
                        const button = document.createElement('button');
                        button.textContent = option;
                        button.classList.add('btn', 'btn-answer');
                        button.addEventListener('click', () => checkAnswer(option, button));
                        optionsArea.appendChild(button);
                    });
                    break;
                case 'drag-drop-verb':
                    const draggable = document.createElement('div');
                    draggable.textContent = question.verb;
                    draggable.classList.add('draggable', 'inline-block', 'bg-blue-300', 'p-2', 'rounded', 'cursor-grab');
                    draggable.draggable = true;
                    draggable.id = 'drag-' + question.verb;
                    draggable.addEventListener('dragstart', (event) => {
                        event.dataTransfer.setData('text', event.target.id);
                        selectedDraggable = event.target;
                        event.target.classList.add('opacity-50');
                    });
                     draggable.addEventListener('dragend', (event) => {
                        event.target.classList.remove('opacity-50');
                        selectedDraggable = null;
                    });
                    draggableContainer.appendChild(draggable);

                    const allMeanings = [question.meaning, ...question.otherMeanings];
                    shuffleArray(allMeanings);

                    allMeanings.forEach(meaningText => {
                        const droppable = document.createElement('div');
                        droppable.textContent = meaningText;
                        droppable.classList.add('droppable', 'border-2', 'border-dashed', 'border-gray-400', 'p-4', 'my-2', 'rounded', 'text-center');
                        droppable.dataset.meaning = meaningText;
                        droppable.addEventListener('dragover', (event) => {
                            event.preventDefault(); // Necessary to allow drop
                            droppable.classList.add('bg-blue-100', 'border-blue-400');
                        });
                        droppable.addEventListener('dragleave', (event) => {
                            droppable.classList.remove('bg-blue-100', 'border-blue-400');
                        });
                        droppable.addEventListener('drop', (event) => {
                            event.preventDefault();
                            droppable.classList.remove('bg-blue-100', 'border-blue-400');
                            if (selectedDraggable) {
                                // Visually move the draggable (optional, can just check answer)
                                // droppable.appendChild(selectedDraggable); 
                                // selectedDraggable.draggable = false; // Prevent further dragging
                                checkAnswer(droppable.dataset.meaning, droppable);
                            }
                        });
                        droppableContainer.appendChild(droppable);
                    });
                    break;
            }
            nextQuestionBtn.classList.add('hidden');
        }

        function checkAnswer(selectedAnswer, buttonElement = null) {
            const question = questions[currentQuestionIndex];
            let isCorrect = false;

            if (question.type === 'noun-fill') {
                isCorrect = selectedAnswer.toLowerCase() === question.correctAnswer.toLowerCase();
            } else if (question.type === 'drag-drop-verb') {
                isCorrect = selectedAnswer === question.meaning;
            }
            else {
                isCorrect = selectedAnswer === question.correctAnswer;
            }

            let feedbackHTML = '';
            if (isCorrect) {
                score += 10;
                scoreEl.textContent = score;
                feedbackHTML = `<div class="feedback-message feedback-correct">Correct! üéâ Well done.</div>`;
                playCorrectSound();
                if (buttonElement && question.type !== 'drag-drop-verb') buttonElement.classList.add('correct');
                else if (buttonElement && question.type === 'drag-drop-verb' && isCorrect) {
                    buttonElement.classList.add('correct', 'border-green-500', 'bg-green-200');
                    buttonElement.innerHTML += ` ‚úÖ (${question.verb})`;
                    draggableContainer.innerHTML = ''; // Remove draggable after correct drop
                }

            } else {
                feedbackHTML = `<div class="feedback-message feedback-incorrect">Not quite. The correct answer was: <strong>${question.correctAnswer}</strong></div>`;
                playIncorrectSound();
                if (buttonElement && question.type !== 'drag-drop-verb') buttonElement.classList.add('incorrect');
                else if (buttonElement && question.type === 'drag-drop-verb' && !isCorrect) {
                     buttonElement.classList.add('incorrect', 'border-red-500', 'bg-red-200');
                }
                 // Highlight the correct option if it's a button-based question
                if (question.options) {
                    optionsArea.querySelectorAll('.btn-answer').forEach(btn => {
                        if (btn.textContent === question.correctAnswer) {
                            btn.classList.add('correct');
                        }
                        btn.disabled = true; // Disable all options after an answer
                    });
                }
                if (question.type === 'drag-drop-verb') {
                    droppableContainer.querySelectorAll('.droppable').forEach(dropEl => {
                        if (dropEl.dataset.meaning === question.meaning) {
                             dropEl.classList.add('correct', 'border-green-500', 'bg-green-200');
                             dropEl.innerHTML += ` ‚úÖ Correct one for ${question.verb}`;
                        }
                        // Make droppables non-interactive after an attempt.
                        dropEl.removeEventListener('dragover', ()=>{});
                        dropEl.removeEventListener('drop', ()=>{});
                    });
                     draggableContainer.innerHTML = ''; // Remove draggable after attempt
                }
            }
            
            feedbackArea.innerHTML = feedbackHTML;
            if(textInputArea) textInputArea.disabled = true;
            optionsArea.querySelectorAll('button').forEach(btn => btn.disabled = true); // Disable all buttons in optionsArea

            nextQuestionBtn.classList.remove('hidden');
        }

        function endGame() {
            gameScreen.classList.add('hidden');
            endScreen.classList.remove('hidden');
            finalScoreEl.textContent = score;

            let message = '';
            const percentage = (score / (questions.length * 10)) * 100;
            if (percentage >= 80) {
                message = "Excellent! You're a true Map Master! üèÜ";
            } else if (percentage >= 50) {
                message = "Good job! Keep practicing to become a Map Master. üëç";
            } else {
                message = "Keep trying! Practice makes perfect. You can do it! üåü";
            }
            finalMessageEl.textContent = message;
        }

        startGameBtn.addEventListener('click', startGame);
        nextQuestionBtn.addEventListener('click', () => {
            currentQuestionIndex++;
            if(textInputArea) textInputArea.disabled = false;
            displayQuestion();
        });
        playAgainBtn.addEventListener('click', startGame);

    </script>
</body>
</html>
